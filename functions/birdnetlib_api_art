from birdnetlib import Recording
from birdnetlib.analyzer import Analyzer
from birdnetlib.batch import DirectoryMultiProcessingAnalyzer
from pathlib import Path

# Define the default species list path relative to this file
# Assumes this script is in 'functions/' and 'data_input_artsliste/' is in the parent directory.
DEFAULT_SPECIES_LIST_PATH = (
    Path(__file__).resolve().parent.parent
    / "data_input_artsliste"
    / "arter.txt"
)


def analyze_single_audio_file(audio_path):
    if not DEFAULT_SPECIES_LIST_PATH.is_file():
        print(
            f"Error: Default species list file not found: {DEFAULT_SPECIES_LIST_PATH}"
        )
        return []  # Or raise error
    analyzer = Analyzer(custom_species_list_path=str(DEFAULT_SPECIES_LIST_PATH))
    recording = Recording(
        analyzer,
        audio_path,
        1,  # This value '1' is preserved from the original script.
        # It might correspond to a parameter like 'week_48' or 'num_threads'.
    )
    recording.analyze()
    return recording.detections


# Internal callback to collect detections from batch processing
def _collect_detections_from_batch(recordings):
    all_detections = []
    for recording in recordings:
        if recording.error:
            # Minimal error reporting for now
            print(
                f"Error processing {recording.path}: {recording.error_message}"
            )
        else:
            # The recording object itself contains the path, and detections
            # are already associated with their specific file.
            all_detections.extend(recording.detections)
    return all_detections


def analyze_audio_directory_with_custom_list(
    directory_path, min_confidence=0.25
):
    # Validate custom species list path
    if not DEFAULT_SPECIES_LIST_PATH.is_file():  # Check if it's a file
        print(
            f"Error: Default species list file not found or is not a file: {DEFAULT_SPECIES_LIST_PATH}"
        )
        return []  # Or raise FileNotFoundError

    analyzer = Analyzer(custom_species_list_path=str(DEFAULT_SPECIES_LIST_PATH))

    # Container for results from the callback
    detections_container = []

    # Wrapper for the batch analyzer's completion callback
    def analysis_pipeline_complete_wrapper(recordings_from_birdnet):
        processed_detections = _collect_detections_from_batch(
            recordings_from_birdnet
        )
        if processed_detections:
            detections_container.extend(processed_detections)

    batch_processor = DirectoryMultiProcessingAnalyzer(
        path=directory_path,
        analyzers=[analyzer],  # Analyzer configured with custom species list
        min_conf=min_confidence,
        # num_processes can be set if needed, defaults to cpu_count()
    )

    batch_processor.on_analyze_directory_complete = (
        analysis_pipeline_complete_wrapper
    )

    print(
        f"Starting batch analysis on directory: {directory_path}"
    )  # Simple print for feedback
    batch_processor.process()  # Start analysis
    print(
        f"Batch analysis finished. Found {len(detections_container)} detections."
    )  # Feedback

    return detections_container
