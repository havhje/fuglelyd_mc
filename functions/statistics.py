import pandas as pd
import logging
from pathlib import Path
from typing import Dict, List, Tuple


def calculate_summary_statistics(df: pd.DataFrame) -> Dict:
    """
    Calculate summary statistics from the detection DataFrame
    
    Args:
        df: DataFrame containing enriched detection data
        
    Returns:
        Dictionary containing various summary statistics
    """
    if df is None or df.empty:
        logging.warning("Cannot calculate statistics: DataFrame is empty or None")
        return {}
    
    stats = {}
    
    # Total number of observations
    stats["total_observations"] = len(df)
    
    # Number of observations per species (using Norwegian name)
    species_counts = df["Species_NorwegianName"].value_counts().to_dict()
    stats["observations_per_species"] = species_counts
    
    # Top 5 most detected species
    stats["top_species"] = dict(sorted(species_counts.items(), key=lambda x: x[1], reverse=True)[:5])
    
    # Number of unique species
    stats["unique_species_count"] = df["Species_NorwegianName"].nunique()
    
    # Observations by redlist status
    redlist_counts = df["Redlist_Status"].value_counts().to_dict()
    stats["observations_per_redlist_status"] = redlist_counts
    
    # Species by redlist status
    redlist_species = {}
    for status in df["Redlist_Status"].unique():
        if pd.isna(status):
            continue
        # Get subset of dataframe with this redlist status
        status_df = df[df["Redlist_Status"] == status]
        # Count observations per species with this status
        species_in_status = status_df["Species_NorwegianName"].value_counts().to_dict()
        redlist_species[status] = species_in_status
    
    stats["species_by_redlist_status"] = redlist_species
    
    # Number of observations per taxonomic order (using Norwegian name)
    order_counts = df["Order_NorwegianName"].value_counts().to_dict()
    stats["observations_per_order"] = order_counts
    
    return stats


def print_summary_statistics(stats: Dict) -> None:
    """
    Print formatted summary statistics to the console
    
    Args:
        stats: Dictionary of statistics generated by calculate_summary_statistics
    """
    if not stats:
        logging.warning("No statistics to print")
        return
    
    print("\n" + "="*50)
    print("ANALYSIS SUMMARY")
    print("="*50)
    
    # Total observations
    print(f"\nTotal observations: {stats.get('total_observations', 0)}")
    print(f"Unique species detected: {stats.get('unique_species_count', 0)}")
    
    # Top species
    print("\nMost frequently detected species:")
    for species, count in stats.get('top_species', {}).items():
        print(f"  {species}: {count} observations")
    
    # Redlist status breakdown in conservation priority order
    redlist_order = ["CR", "EN", "VU", "NT", "LC", "DD", "NA", "NE"]
    species_by_status = stats.get('species_by_redlist_status', {})
    
    print("\nObservations by redlist status (ordered by conservation priority):")
    
    # Display total counts by status in conservation priority order
    redlist_counts = stats.get('observations_per_redlist_status', {})
    for status in redlist_order:
        if status in redlist_counts:
            count = redlist_counts[status]
            print(f"  {status}: {count} observations")
            
            # List species within this status category
            if status in species_by_status:
                species_counts = species_by_status[status]
                # Sort species by observation count (descending)
                for species, sp_count in sorted(species_counts.items(), key=lambda x: x[1], reverse=True):
                    print(f"    - {species}: {sp_count} observations")
    
    # Handle any statuses not in our predefined order
    for status, count in redlist_counts.items():
        if status not in redlist_order and status:
            status_display = status
            print(f"  {status_display}: {count} observations")
            
            # List species within this status category
            if status in species_by_status:
                species_counts = species_by_status[status]
                # Sort species by observation count (descending)
                for species, sp_count in sorted(species_counts.items(), key=lambda x: x[1], reverse=True):
                    print(f"    - {species}: {sp_count} observations")
    
    # Order breakdown (top 5)
    order_counts = stats.get('observations_per_order', {})
    if order_counts:
        print("\nObservations by taxonomic order (top 5):")
        for order, count in sorted(order_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
            print(f"  {order}: {count} observations")
    
    print("\n" + "="*50)


def generate_statistics_report(csv_path: Path) -> Dict:
    """
    Generate and print summary statistics from the enriched detections CSV
    
    Args:
        csv_path: Path to the enriched detections CSV file
        
    Returns:
        Dictionary containing the calculated statistics
    """
    try:
        # Read the CSV file
        df = pd.read_csv(csv_path, sep=";")
        
        # Calculate statistics
        stats = calculate_summary_statistics(df)
        
        # Print statistics to console
        print_summary_statistics(stats)
        
        return stats
        
    except Exception as e:
        logging.error(f"Error generating statistics report: {e}", exc_info=True)
        return {}